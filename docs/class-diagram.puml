@startuml periphery-manager
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

header
    periphery-manager - Class Diagram
endheader

'Classes

object spdlog {
}

object fmt {
}

interface LoggerInterface {
    +log(LogLevel level, const std::string &format, Args &&... args) : void
    #{abstract}logImpl(LogLevel level, const std::string &msg) : void
}

class Logger {
}

class SpdLogAdapter {
    +logImpl()
}

class StdoutAdapter {
    +logImpl()
}

abstract AbstractDevice {
    -hw_interface_ : std::shared_ptr<HwInterface>
    -protocol_interface_ : std::shared_ptr<ProtocolInterface>
    +init() : uint8_t
    +deinit() : uint8_t
    +{abstract}getStatus() : uint8_t
    #AbstractDevice(std::shared_ptr<HwInterface> hw_interface,
        std::shared_ptr<ProtocolInterface> protocol_interface)
    #getDataSyncroniously(std::vector<uint8_t> &tx_data) : std::vector<uint8_t>
    #getDataAsyncroniously(std::vector<uint8_t> &tx_data) : std::vector<uint8_t>
    #initCommunication() : uint8_t
    -writeData(const std::vector<uint8_t> data) : void
    -readData() : std::vector<uint8_t>
    -{abstract}enable() : uint8_t
    -{abstract}disable() : uint8_t
}

class SensorMock {
    +SensorMock(std::shared_ptr<HwInterface> hw_interface,
        std::shared_ptr<ProtocolInterface> protocol_interface)
    +init() : uint8_t
    +deinit() : uint8_t
    +getStatus() : uint8_t
}

class TemperatureSensor {
    +TemperatureSensor(std::shared_ptr<HwInterface> hw_interface,
        std::shared_ptr<ProtocolInterface> protocol_interface)
    +getStatus() : uint8_t
    +getTemperature() : uint8_t
    +getTemperatureAsynchronously() : std::future<uint8_t>
    -enable() : uint8_t
    -disable() : uint8_t
}

interface HwInterface {
    +{abstract} write(const std::vector<uint8_t>& data) : void
    +{abstract} read() : std::vector<uint8_t>
    +{abstract} init() : bool
    +{abstract} deinit() : bool
}

class HwMock {
    +write(const std::vector<uint8_t>& data) : void
    +read() : std::vector<uint8_t>
    +init() : bool
    +deinit() : bool
}

class Uart {
    +write(const std::vector<uint8_t>& data) : void
    +read() : std::vector<uint8_t>
    +init() : bool
    +deinit() : bool
}

class Ethernet {
    +write(const std::vector<uint8_t>& data) : void
    +read() : std::vector<uint8_t>
    +init() : bool
    +deinit() : bool
}

interface ProtocolInterface {
    +{abstract}packData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
    +{abstract}unpackData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
}

class TemperatureSensorProtocol {
    +packData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
    +unpackData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
}

class ProtocolMock {
    +packData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
    +unpackData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
}

'Relations

SensorMock --|> AbstractDevice
TemperatureSensor --|> AbstractDevice

AbstractDevice "Strategy" o-- HwInterface
AbstractDevice "Strategy" o-- ProtocolInterface

TemperatureSensorProtocol --|> ProtocolInterface
ProtocolMock --|> ProtocolInterface

HwMock --|> HwInterface
Uart --|> HwInterface
Ethernet --|> HwInterface

Logger ..> LoggerInterface
Logger ..> SpdLogAdapter
SpdLogAdapter "Library" ..> spdlog
LoggerInterface "Library" ..> fmt
SpdLogAdapter "Adapter\nTemplate method" --|> LoggerInterface
StdoutAdapter "Adapter\nTemplate method" --|> LoggerInterface

class Scheduler {
    -tasks_ : std::queue<std::shared_ptr<CommandInterface>>
    +enqueueTask(const std::shared_ptr<CommandInterface>& task) : void
    +workerFunction() : void
}

class TcpMessageServer {
    -command_dispatcher_ : std::shared_ptr<CommandDispatcher>
    +handleMessage(char* buffer, size_t length) : bool
}

class CommandDispatcher {
    -scheduler_ : std::shared_ptr<Scheduler>
    -command_map_ : std::unordered_map<std::string, std::shared_ptr<CommandInterface>>
    +registerCommand(const std::string& command_name, std::shared_ptr<CommandInterface> command) : void
    +dispatchCommand(const std::string& command_name) : void
}

interface CommandInterface {
    +{abstract}execute()
}

class StopCommand {
    +execute()
}

class GetTempCommand {
    -sensor_ : std::shared_ptr<TemperatureSensor>
    +execute()
}

TcpMessageServer o-- CommandDispatcher
CommandDispatcher o-- Scheduler
CommandDispatcher --> CommandInterface
StopCommand --|> CommandInterface
GetTempCommand --|> CommandInterface

'Notes

note as UserCode
    LOG_INFO("periphery-manager {}.{}.{}", APP_VERSION_MAJOR, APP_VERSION_MINOR, APP_VERSION_PATCH);

    auto hw_interface = std::make_shared<HwMock>();
//    auto hw_interface = std::make_shared<TcpClient>("127.0.0.1", 12345);
    auto protocol_interface = std::make_shared<TemperatureSensorProtocol>();
    auto temp_sensor = std::make_shared<TemperatureSensor>(hw_interface, protocol_interface);

    // Default severity level is Info
    SET_LOG_LEVEL(LoggerInterface::LogLevel::kTrace);

    if (temp_sensor->init()) {
        LOG_DEBUG("{}", temp_sensor->getStatus());
        LOG_DEBUG("{}", temp_sensor->getTemperature());
        LOG_DEBUG("{}", temp_sensor->getHumidity());
        LOG_DEBUG("{}", temp_sensor->getTemperatureAsynchronously());
        temp_sensor->deinit();
    }

    uint32_t cores_num = sysconf(_SC_NPROCESSORS_ONLN);
    LOG_INFO("CPU cores number is {}", cores_num);
    auto scheduler = std::make_shared<Scheduler>(cores_num);

    auto dispatcher = std::make_shared<CommandDispatcher>(scheduler);
    dispatcher->registerCommand("stop", std::make_shared<StopCommand>());
    dispatcher->registerCommand("temp", std::make_shared<GetTempCommand>(temp_sensor));

    int tcp_server_port = 12345;
    auto tcp_server = std::make_shared<TcpMessageServer>(tcp_server_port, dispatcher);
    tcp_server->init();

    while(true) {

    }
end note

@enduml
