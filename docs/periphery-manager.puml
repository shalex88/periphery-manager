@startuml reg-manager
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

'Classes
abstract AbstractPeriphery {
    -std::shared_ptr<CommunicationInterface> communication_interface_;
    #AbstractPeriphery(std::shared_ptr<CommunicationInterface> interface)
    +writeData(const std::vector<uint8_t> data) : void
    +getData() : std::vector<uint8_t>
    +{abstract}init()
    +{abstract}deinit()
    +{abstract}getStatus() : uint8_t
}

class SensorMock {
    +SensorMock(std::shared_ptr<CommunicationInterface> interface)
    +init()
    +deinit()
    +getStatus() : uint8_t
}

class TemperatureSensor {
    +TemperatureSensor(std::shared_ptr<CommunicationInterface> interface)
    +init()
    +deinit()
    +getStatus() : uint8_t
}

class Camera {
    +Camera(std::shared_ptr<CommunicationInterface> interface)
    +init()
    +deinit()
    +getStatus() : uint8_t
}

interface CommunicationInterface {
    +{abstract} write(const std::vector<uint8_t>& data) : void
    +{abstract} read() : std::vector<uint8_t>
}

class CommunicationMock {
    +write(const std::vector<uint8_t>& data) : void
    +read() : std::vector<uint8_t>
}

class Uart {
    +write(const std::vector<uint8_t>& data) : void
    +read() : std::vector<uint8_t>
}

class Ethernet {
    +write(const std::vector<uint8_t>& data) : void
    +read() : std::vector<uint8_t>
}

object UserCode {
    auto communication_interface = std::make_shared<Uart>();
    auto temp_sensor = std::make_shared<TemperatureSensor>(communication_interface);
    \n
    temp_sensor->init();
}

'Relations
SensorMock -up-|> AbstractPeriphery
TemperatureSensor -up-|> AbstractPeriphery
Camera -up-|> AbstractPeriphery
AbstractPeriphery "Strategy" o-- CommunicationInterface
CommunicationMock -up-|> CommunicationInterface
Uart -up-|> CommunicationInterface
Ethernet -up-|> CommunicationInterface

'Notes

@enduml
