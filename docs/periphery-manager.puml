@startuml reg-manager
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

'Classes

object spdlog {
}

object fmt {
}

interface LoggerInterface {
    +log(LogLevel level, const std::string &format, Args &&... args) : void
    #{abstract}logImpl(LogLevel level, const std::string &msg) : void
}

class Logger {
}

class SpdLogAdapter {
    +logImpl()
}

class StdoutAdapter {
    +logImpl()
}

abstract AbstractPeriphery {
    -communication_interface_ : std::shared_ptr<CommunicationInterface>
    -protocol_interface_ : std::shared_ptr<ProtocolInterface>
    -writeData(const std::vector<uint8_t> data) : void
    -readData() : std::vector<uint8_t>
    #AbstractPeriphery(std::shared_ptr<CommunicationInterface> communication_interface,
        std::shared_ptr<ProtocolInterface> protocol_interface)
    #getDataSyncroniously(std::vector<uint8_t> &tx_data) : std::vector<uint8_t>
    #getDataAsyncroniously(std::vector<uint8_t> &tx_data) : std::vector<uint8_t>
    #initCommunication() : uint8_t
    #{abstract}init() : uint8_t
    #{abstract}deinit() : uint8_t
    #{abstract}getStatus() : uint8_t
}

class SensorMock {
    +SensorMock(std::shared_ptr<CommunicationInterface> communication_interface,
        std::shared_ptr<ProtocolInterface> protocol_interface)
    +init() : uint8_t
    +deinit() : uint8_t
    +getStatus() : uint8_t
}

class TemperatureSensor {
    +TemperatureSensor(std::shared_ptr<CommunicationInterface> communication_interface,
        std::shared_ptr<ProtocolInterface> protocol_interface)
    +init() : uint8_t
    +deinit() : uint8_t
    +getStatus() : uint8_t
    +getTemperature() : uint8_t
}

interface CommunicationInterface {
    +{abstract} write(const std::vector<uint8_t>& data) : void
    +{abstract} read() : std::vector<uint8_t>
}

class CommunicationMock {
    +write(const std::vector<uint8_t>& data) : void
    +read() : std::vector<uint8_t>
}

class Uart {
    +write(const std::vector<uint8_t>& data) : void
    +read() : std::vector<uint8_t>
}

class Ethernet {
    +write(const std::vector<uint8_t>& data) : void
    +read() : std::vector<uint8_t>
}

interface ProtocolInterface {
    +{abstract}packData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
    +{abstract}unpackData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
}

class TemperatureSensorProtocol {
    +packData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
    +unpackData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
}

class ProtocolMock {
    +packData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
    +unpackData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
}

object UserCode {
    auto communication_interface = std::make_shared<CommunicationMock>();
    auto protocol_interface = std::make_shared<TemperatureSensorProtocol>();
    auto temp_sensor = std::make_shared<TemperatureSensor>(communication_interface, protocol_interface);
    \n
    temp_sensor->init();
    LOG_INFO("{}", temp_sensor->getStatus());
    LOG_INFO("{}", temp_sensor->getTemperature());
    SET_LOG_LEVEL(LoggerInterface::LogLevel::Debug);
    LOG_DEBUG("{}", temp_sensor->getHumidity());
    temp_sensor->deinit();
}

'Relations

SensorMock --|> AbstractPeriphery
TemperatureSensor --|> AbstractPeriphery

AbstractPeriphery "Strategy" o-- CommunicationInterface
AbstractPeriphery "Strategy" o-- ProtocolInterface

TemperatureSensorProtocol --|> ProtocolInterface
ProtocolMock --|> ProtocolInterface

CommunicationMock --|> CommunicationInterface
Uart --|> CommunicationInterface
Ethernet --|> CommunicationInterface

Logger ..> LoggerInterface
Logger ..> SpdLogAdapter
SpdLogAdapter "Library" ..> spdlog
LoggerInterface "Library" ..> fmt
SpdLogAdapter "Adapter\nTemplate method" --|> LoggerInterface
StdoutAdapter "Adapter\nTemplate method" --|> LoggerInterface

'Notes

@enduml
