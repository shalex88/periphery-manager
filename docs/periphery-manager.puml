@startuml reg-manager
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

'Classes

object spdlog {
}

object fmt {
}

interface LoggerInterface {
    +log(LogLevel level, const std::string &format, Args &&... args) : void
    #{abstract}logImpl(LogLevel level, const std::string &msg) : void
}

class Logger {
}

class SpdLogAdapter {
    +logImpl()
}

class StdoutAdapter {
    +logImpl()
}

abstract AbstractDevice {
    -hw_interface_ : std::shared_ptr<HwInterface>
    -protocol_interface_ : std::shared_ptr<ProtocolInterface>
    +init() : uint8_t
    +deinit() : uint8_t
    +{abstract}getStatus() : uint8_t
    #AbstractDevice(std::shared_ptr<HwInterface> hw_interface,
        std::shared_ptr<ProtocolInterface> protocol_interface)
    #getDataSyncroniously(std::vector<uint8_t> &tx_data) : std::vector<uint8_t>
    #getDataAsyncroniously(std::vector<uint8_t> &tx_data) : std::vector<uint8_t>
    #initCommunication() : uint8_t
    -writeData(const std::vector<uint8_t> data) : void
    -readData() : std::vector<uint8_t>
    -{abstract}enable() : uint8_t
    -{abstract}disable() : uint8_t
}

class SensorMock {
    +SensorMock(std::shared_ptr<HwInterface> hw_interface,
        std::shared_ptr<ProtocolInterface> protocol_interface)
    +init() : uint8_t
    +deinit() : uint8_t
    +getStatus() : uint8_t
}

class TemperatureSensor {
    +TemperatureSensor(std::shared_ptr<HwInterface> hw_interface,
        std::shared_ptr<ProtocolInterface> protocol_interface)
    +getStatus() : uint8_t
    +getTemperature() : uint8_t
    +getTemperatureAsynchronously() : std::future<uint8_t>
    -enable() : uint8_t
    -disable() : uint8_t
}

interface HwInterface {
    +{abstract} write(const std::vector<uint8_t>& data) : void
    +{abstract} read() : std::vector<uint8_t>
    +{abstract} init() : bool
    +{abstract} deinit() : bool
}

class HwMock {
    +write(const std::vector<uint8_t>& data) : void
    +read() : std::vector<uint8_t>
    +init() : bool
    +deinit() : bool
}

class Uart {
    +write(const std::vector<uint8_t>& data) : void
    +read() : std::vector<uint8_t>
    +init() : bool
    +deinit() : bool
}

class Ethernet {
    +write(const std::vector<uint8_t>& data) : void
    +read() : std::vector<uint8_t>
    +init() : bool
    +deinit() : bool
}

interface ProtocolInterface {
    +{abstract}packData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
    +{abstract}unpackData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
}

class TemperatureSensorProtocol {
    +packData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
    +unpackData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
}

class ProtocolMock {
    +packData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
    +unpackData(const std::vector<uint8_t>& data) : std::vector<uint8_t>
}

'Relations

SensorMock --|> AbstractDevice
TemperatureSensor --|> AbstractDevice

AbstractDevice "Strategy" o-- HwInterface
AbstractDevice "Strategy" o-- ProtocolInterface

TemperatureSensorProtocol --|> ProtocolInterface
ProtocolMock --|> ProtocolInterface

HwMock --|> HwInterface
Uart --|> HwInterface
Ethernet --|> HwInterface

Logger ..> LoggerInterface
Logger ..> SpdLogAdapter
SpdLogAdapter "Library" ..> spdlog
LoggerInterface "Library" ..> fmt
SpdLogAdapter "Adapter\nTemplate method" --|> LoggerInterface
StdoutAdapter "Adapter\nTemplate method" --|> LoggerInterface

'Notes

note as UserCode
    auto hw_interface = std::make_shared<HwMock>();
    auto protocol_interface = std::make_shared<TemperatureSensorProtocol>();
    auto temp_sensor = std::make_shared<TemperatureSensor>(hw_interface, protocol_interface);

    if (temp_sensor->init()) {
        LOG_INFO("{}", temp_sensor->getStatus());
        LOG_INFO("{}", temp_sensor->getTemperature());
        LOG_INFO("{}", temp_sensor->getHumidity());
        LOG_INFO("{}", temp_sensor->getTemperatureAsynchronously());
        temp_sensor->deinit();
    }
end note

@enduml
